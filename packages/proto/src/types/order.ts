// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

export interface GetOrderReq {
  id: string;
}

export interface OrderRes {
  id: string;
  userId: string;
  items: OrderItem[];
  orderStatus: string;
  total: number;
  clientSecret: string;
}

export interface AllOrderRes {
  orders: OrderRes[];
}

export interface Empty {
}

export interface CreateOrderReq {
  items: OrderItem[];
  userId: string;
}

export interface OrderItem {
  id: string;
  productId: string;
  orderId: string;
  quantity: number;
  price: number;
}

export interface UpdateOrderStatusReq {
  orderId: string;
  status: string;
}

export interface UpdateOrderStatusRes {
  message: string;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  getOrder(request: GetOrderReq): Observable<OrderRes>;

  getAllOrders(request: Empty): Observable<AllOrderRes>;

  createOrder(request: CreateOrderReq): Observable<OrderRes>;

  updateOrderStatus(request: UpdateOrderStatusReq): Observable<UpdateOrderStatusRes>;
}

export interface OrderServiceController {
  getOrder(request: GetOrderReq): Promise<OrderRes> | Observable<OrderRes> | OrderRes;

  getAllOrders(request: Empty): Promise<AllOrderRes> | Observable<AllOrderRes> | AllOrderRes;

  createOrder(request: CreateOrderReq): Promise<OrderRes> | Observable<OrderRes> | OrderRes;

  updateOrderStatus(
    request: UpdateOrderStatusReq,
  ): Promise<UpdateOrderStatusRes> | Observable<UpdateOrderStatusRes> | UpdateOrderStatusRes;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getOrder", "getAllOrders", "createOrder", "updateOrderStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
