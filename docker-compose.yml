version: '3.8'

services:
  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: Dockerfile
    ports:
      - "${API_GATEWAY_PORT:-3000}:3000"
    networks:
      - ecom-network
    restart: unless-stopped

  cart-service:
    build:
      context: ./apps/cart-service
      dockerfile: Dockerfile
    ports:
      - "${CART_SERVICE_PORT:-3001}:3001"
    networks:
      - ecom-network
    restart: unless-stopped

  order-service:
    build:
      context: ./apps/order-service
      dockerfile: Dockerfile
    ports:
      - "${ORDER_SERVICE_PORT:-3002}:3002"
    networks:
      - ecom-network
    restart: unless-stopped

  payment-service:
    build:
      context: ./apps/payment-service
      dockerfile: Dockerfile
    ports:
      - "${PAYMENT_SERVICE_PORT:-3003}:3003"
    networks:
      - ecom-network
    restart: unless-stopped

  product-service:
    build:
      context: ./apps/product-service
      dockerfile: Dockerfile
    ports:
      - "${PRODUCT_SERVICE_PORT:-3004}:3004"
    networks:
      - ecom-network
    restart: unless-stopped

  user-service:
    build:
      context: ./apps/user-service
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT:-3005}:3005"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    ports:
      - "${WEB_PORT:-8080}:8080"
    networks:
      - ecom-network
    restart: unless-stopped

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecom-network
    restart: unless-stopped

networks:
  ecom-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
